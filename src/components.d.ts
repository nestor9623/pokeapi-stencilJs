/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults } from "@stencil/router";
import { Move } from "./components/models/pokemon.model";
export namespace Components {
    interface AppHome {
    }
    interface AppRoot {
    }
    interface CirclePercentaje {
    }
    interface PokemonBattle {
    }
    interface PokemonCard {
        "language": any;
        "literals": any;
        "pokemonName": any;
    }
    interface PokemonList {
        "match": MatchResults;
    }
    interface PokemonModalDialog {
        "literals": any;
        "moves": Move[];
        "open": boolean;
        "pokemon": any;
        "titulo": any;
        "transparent": boolean;
    }
    interface PokemonPaginator {
        "count": number;
        "itemsPerPage": number;
        "offset": number;
    }
    interface SelectPokemon {
        "options": any;
        "titulo": any;
    }
}
declare global {
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLCirclePercentajeElement extends Components.CirclePercentaje, HTMLStencilElement {
    }
    var HTMLCirclePercentajeElement: {
        prototype: HTMLCirclePercentajeElement;
        new (): HTMLCirclePercentajeElement;
    };
    interface HTMLPokemonBattleElement extends Components.PokemonBattle, HTMLStencilElement {
    }
    var HTMLPokemonBattleElement: {
        prototype: HTMLPokemonBattleElement;
        new (): HTMLPokemonBattleElement;
    };
    interface HTMLPokemonCardElement extends Components.PokemonCard, HTMLStencilElement {
    }
    var HTMLPokemonCardElement: {
        prototype: HTMLPokemonCardElement;
        new (): HTMLPokemonCardElement;
    };
    interface HTMLPokemonListElement extends Components.PokemonList, HTMLStencilElement {
    }
    var HTMLPokemonListElement: {
        prototype: HTMLPokemonListElement;
        new (): HTMLPokemonListElement;
    };
    interface HTMLPokemonModalDialogElement extends Components.PokemonModalDialog, HTMLStencilElement {
    }
    var HTMLPokemonModalDialogElement: {
        prototype: HTMLPokemonModalDialogElement;
        new (): HTMLPokemonModalDialogElement;
    };
    interface HTMLPokemonPaginatorElement extends Components.PokemonPaginator, HTMLStencilElement {
    }
    var HTMLPokemonPaginatorElement: {
        prototype: HTMLPokemonPaginatorElement;
        new (): HTMLPokemonPaginatorElement;
    };
    interface HTMLSelectPokemonElement extends Components.SelectPokemon, HTMLStencilElement {
    }
    var HTMLSelectPokemonElement: {
        prototype: HTMLSelectPokemonElement;
        new (): HTMLSelectPokemonElement;
    };
    interface HTMLElementTagNameMap {
        "app-home": HTMLAppHomeElement;
        "app-root": HTMLAppRootElement;
        "circle-percentaje": HTMLCirclePercentajeElement;
        "pokemon-battle": HTMLPokemonBattleElement;
        "pokemon-card": HTMLPokemonCardElement;
        "pokemon-list": HTMLPokemonListElement;
        "pokemon-modal-dialog": HTMLPokemonModalDialogElement;
        "pokemon-paginator": HTMLPokemonPaginatorElement;
        "select-pokemon": HTMLSelectPokemonElement;
    }
}
declare namespace LocalJSX {
    interface AppHome {
    }
    interface AppRoot {
    }
    interface CirclePercentaje {
    }
    interface PokemonBattle {
    }
    interface PokemonCard {
        "language"?: any;
        "literals"?: any;
        "onCardSelected"?: (event: CustomEvent<{ pokemon: any }>) => void;
        "pokemonName"?: any;
    }
    interface PokemonList {
        "match"?: MatchResults;
    }
    interface PokemonModalDialog {
        "literals"?: any;
        "moves"?: Move[];
        "onModalState"?: (event: CustomEvent<boolean>) => void;
        "open"?: boolean;
        "pokemon"?: any;
        "titulo"?: any;
        "transparent"?: boolean;
    }
    interface PokemonPaginator {
        "count"?: number;
        "itemsPerPage"?: number;
        "offset"?: number;
        "onPaging"?: (event: CustomEvent<{ offset: number }>) => void;
    }
    interface SelectPokemon {
        "onValueSelect"?: (event: CustomEvent<string>) => void;
        "options"?: any;
        "titulo"?: any;
    }
    interface IntrinsicElements {
        "app-home": AppHome;
        "app-root": AppRoot;
        "circle-percentaje": CirclePercentaje;
        "pokemon-battle": PokemonBattle;
        "pokemon-card": PokemonCard;
        "pokemon-list": PokemonList;
        "pokemon-modal-dialog": PokemonModalDialog;
        "pokemon-paginator": PokemonPaginator;
        "select-pokemon": SelectPokemon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "circle-percentaje": LocalJSX.CirclePercentaje & JSXBase.HTMLAttributes<HTMLCirclePercentajeElement>;
            "pokemon-battle": LocalJSX.PokemonBattle & JSXBase.HTMLAttributes<HTMLPokemonBattleElement>;
            "pokemon-card": LocalJSX.PokemonCard & JSXBase.HTMLAttributes<HTMLPokemonCardElement>;
            "pokemon-list": LocalJSX.PokemonList & JSXBase.HTMLAttributes<HTMLPokemonListElement>;
            "pokemon-modal-dialog": LocalJSX.PokemonModalDialog & JSXBase.HTMLAttributes<HTMLPokemonModalDialogElement>;
            "pokemon-paginator": LocalJSX.PokemonPaginator & JSXBase.HTMLAttributes<HTMLPokemonPaginatorElement>;
            "select-pokemon": LocalJSX.SelectPokemon & JSXBase.HTMLAttributes<HTMLSelectPokemonElement>;
        }
    }
}
